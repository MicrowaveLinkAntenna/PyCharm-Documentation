{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This guide will walk you through installing and setting up Python for use in the PyCharm IDE. The aim to get you set up and ready to work with Python in COMP-1510.</p> <p>Python is a programming language developed by the Python Software Foundation. Because of its flexibility and simplicity, Python is well-suited for anyone looking to learn programming for the first time. Python is the first programming language CST students will learn at BCIT's Downtown Campus.</p> <p>PyCharm is an integrated development environment (IDE) made by JetBrains studios. An IDE is an application designed for writing, testing, and running computer code. PyCharm is specifically designed for coding in Python. </p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This guide is intended for users with little to no experience with programming, and in particular first year CST students at BCIT\u2019s Downtown Campus.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Only basic computer literacy is required to follow this guide. Users will need a Windows, macOS, or Linux computer to use PyCharm. All other software will be installed as part of the guide.</p>"},{"location":"#objectives","title":"Objectives","text":"<p>In this guide, you will:</p> <ul> <li>Install Python and PyCharm Professional.</li> <li>Configure PyCharm for COMP-1510.</li> <li>Write your first Python program.</li> </ul>"},{"location":"configuration/","title":"Configuring PyCharm for COMP-1510","text":"<p>This document will cover correctly configuring the IDE for COMP-1510. Namely, ensuring that PEP-8 formatting is checked, and adding a GitHub token to enable you to submit code for lab assignments. The steps here will be the same regardless of your operating system.  COMP-1510 requires PyCharm to be configured in a certain way in order to make the most use of it in lab assignments, and one of the easiest ways to avoid losing marks is to ensure that it is configured properly.</p>"},{"location":"configuration/#opening-pycharm-settings","title":"Opening PyCharm Settings","text":"<p>Do this first, as the next two sections will assume you have already done this.</p> <ol> <li> <p>Open PyCharm and click <code>Customize</code> from the landing screen.  Then click <code>All settings...</code> </p> </li> <li> <p>If you have previously opened a PyCharm project, PyCharm will re-open that project when it launches and will not show the landing screen. In this case, click the gear icon in the window header, and then click <code>Settings...</code> from the dropdown. </p> </li> <li> <p>In both cases, this settings panel should appear: </p> </li> </ol>"},{"location":"configuration/#configuring-pep-8-validation","title":"Configuring PEP-8 Validation","text":"<p>PEP-8 is a standard in Python that specifies how code should be formatted. COMP-1510 strictly enforces PEP-8 formatting, and any deviation will result in lost marks. Therefore, it is important to ensure that the IDE is configured to check for PEP-8 and warn you when code does not conform to it.</p> <ol> <li> <p>In the settings panel, type <code>pep 8</code> into the search bar.</p> </li> <li> <p>Click on the <code>Profile</code> dropdown, and select <code>Default IDE</code>. This ensures that the settings are applied to the entire IDE and is used as the default for all new projects; instead of being applied to only the currently open project.</p> </li> <li> <p>There should only be two visible settings: <code>PEP 8 coding style violation</code>, and <code>PEP 8 naming convention violation</code>. Ensure both are checked. They may already be checked by default, but if not, check them. </p> </li> <li> <p>Click on <code>PEP 8 coding style violation</code>, and set the Scope to <code>In All Scopes</code>, set the Severity to <code>Warning</code>, and set the Highlighting in editor to <code>Warning</code>.  </p> </li> <li> <p>Click on <code>PEP 8 naming convention violation</code> and set the same three parameters as specified in the previous step. This step and the previous step will result in a yellow line under any code that does not conform to PEP-8 formatting. When programming, you can hover your mouse over the yellow line to see the specific PEP-8 rule that the code does not conform to, allowing you to fix it. </p> </li> <li> <p>Click <code>Apply</code> to save the changes. </p> </li> </ol>"},{"location":"configuration/#adding-a-github-personal-access-token","title":"Adding a GitHub Personal Access Token","text":"<p>In COMP-1510, you will have weekly graded assignments (called labs) where you submit your work by pushing to a specific GitHub repository. For this, you will need a GitHub account, and to create and add a Personal Access Token to PyCharm to allow it to push code as your account. It is a short text string of random characters that works similarly to am one-time password or the session cookie in a browser. </p> <ol> <li> <p>In the settings panel, type <code>github</code> into the search bar.</p> </li> <li> <p>Click <code>GitHub</code> in the sidebar. </p> </li> <li> <p>Click <code>Add account...</code>. </p> </li> <li> <p>From the dropdown, click <code>Log In with Token...</code> </p> </li> <li> <p>In the popup the appears, click <code>Generate...</code>. </p> </li> <li> <p>Your browser will open to a GitHub login page. Make sure you sign in with the GitHub account that you plan on using to submit coursework.  </p> </li> <li> <p>Once you sign in, you will be redirected to the page for creating tokens. It should already be prepopulated with a name and the required access settings. The default name will be \"PyCharm GitHub integration plugin\", which you can change. You may also want to use the expiry date dropdown to set the expiry date to after your COMP-1510 class ends, or set it to never expire. You can also adjust the settings for what the token is allowed to access, but for COMP-1510's purposes, you shouldn't need to change anything. When you're done configuring the token, scroll to the borrom of the page and click <code>Generate token</code>. </p> </li> <li> <p>Copy the new token into your clipboard by clicking the button beside it.  </p> <p>Warning: The Personal Access Token alone is capable of signing into your account, without even entering your username. Never share it with anyone else, for example, with a classmate over Discord.</p> <p>Your instructor, GitHub, or anyone else have no reason to ask you to send them a token, and such emails or other communications are most likely scams with the goal of gaining access to your GitHub account.  </p> </li> <li> <p>Minimize the browser and paste the token into the PyCharm popup, then click <code>Add account...</code>. </p> </li> <li> <p>You should now see your GitHub username and profile picture in the settings panel. Click <code>Apply...</code> to save the setting. </p> </li> <li> <p>Remember to close (or refresh) the tab that is displaying your token. Then copy something generic into your clipboard, and clear the clipboard history. These prevent accidentally leaking the token, which, as mentioned above, is effectively a password.</p> </li> <li> <p>If you need to delete or edit the token at a later date, for example, to change permissions or extend the expiry date, go to this link. Click on the name of the token (in blue) to go to the same page shown in step 7. </p> </li> </ol>"},{"location":"configuration/#next-steps","title":"Next Steps","text":"<p>Now that you have finished configuring PyCharm for use in COMP-1510, it is a good idea to get ahead of the class by gaining some basic experience coding in Python. Like most courses at BCIT, COMP-1510 'hits the ground running', so coming to your first class with even a little bit of knowledge can help tremendously. Proceed to Your First Program to begin your Python coding journey.</p>"},{"location":"first_program/","title":"Your first program in PyCharm","text":"<p>'Fizz buzz' is a children's game used to teach division. You play it like this: starting from the number one, count up to one-hundred, saying each numbers out loud. Each time you get to a multiple of three, say \"Fizz\" instead of the number's name. Each time you get to a multiple of five, say \"Buzz\". And each time you get to a multiple of three and five, say \"FizzBuzz\". A game would look like this:</p> <p>1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, Fizz Buzz, ...</p> <p>And so on.</p> <p>Writing a program which plays fizz buzz happens to be a well-known basic technical question for programming interviews. In this part of the guide, we'll introduce you to programming in Python by writing a program for fizz buzz.</p>"},{"location":"first_program/#creating-a-python-file","title":"Creating a Python File","text":"<p>Before you start programming, you need to create a Python file to write your code in. One project can have multiple Python files, each containing parts of a larger program. For this tutorial, you'll only need a single Python file.</p> <p>To create a Python File, right-click on your project's name in the left sidebar, select 'New', then 'Python File'. We recommend naming the file 'FizzBuzz'.</p> <p></p> <p>Your new Python file should automatically open in the IDE.</p>"},{"location":"first_program/#printing","title":"Printing","text":"<p>In programming, 'printing' something usually means displaying it as text on the screen, rather than printing it with a printer.</p> <p>When we want to print something in Python, we use the 'print()' function: <pre><code>print(\"Hello, World!\")\n</code></pre> Try copy and pasting this line into your Python file. Run the file py pressing the green play button in the top right. You should see the text 'Hello, World!' appear in the console at the bottom of the window.</p>"},{"location":"first_program/#loops","title":"Loops","text":"<p>How do we print every number without listing?</p> <p>Well, anytime we want do something repeatedly in a program there's a good chance we can use a loop.</p> <p>Remove any code from your Python file, then copy and paste the following code and run it: <pre><code>number = 0\nwhile number &lt; 101:\n    print(number)\n    number = number + 1\n</code></pre> This should print the numbers 0 to 99 in your console.</p> <p>On the first line of code, we create a variable. A variable has a name and a value; in the first line of code we create a variable named 'number' and give it the value 0.</p> <p>On the second line, we create a while loop. A while loop checks whether a condition is true or false. If the condition is true, the loop runs the indented code (lines 3 and 4), then checks if the condition again. It does this over and over until the condition is false, hence why its called a loop.</p> <p>In this example, the loops condition is whether the variable 'number' is less than 101. We set number to 0 in the previous line, so this condition is true, and the loop starts.</p> <p>Inside the loop we print number's value. Because we want to print number's value, we shouldn't put it in quotation marks like we did with \"Hello, World!\". You can test what happens when you write print(\"number\") instead of print(number) to see why. Make sure to change it back after!</p> <p>After printing number's value, we reassign (change) number's value. Specifically, we change its value to its value plus 1. In other words, we add 1 to number's value. </p>"},{"location":"first_program/#if-else-statements","title":"If-Else statements","text":"<p>Now, how do we replace numbers with 'Fizz' and 'Buzz'? Well, when we want to do something in some cases and something else in other cases, we can use an 'if-else' statement. Replace your code with the following: <pre><code>number = 0\nwhile number &lt; 101:\n    if number == 3:\n        print(\"Fizz\")\n    else:\n        print(number)\n    number = number + 1\n</code></pre> If you run this, and scroll up in the console, you'll see that 'Fizz' was printed instead of 3. How?</p> <p>The if-statement (third line) is kind of like a while loop: it checks if a condition is true or false, then runs some code if it's true. The difference is that the if statement does not loop. It checks once, runs the code or doesn't, then finishes.</p> <p>On the fifth line, we have an else-statement. An else statement must come directly after an if statement. Instead of checking a condition, the else-statement runs when the if-statement above it didn't.</p> <p>To simplify, the code we just added checks if the value of number is 3. If it is, we run the code in the if-statement, which prints \"Fizz\". If it is not, we run the code in the else-statement, which prints the value of number.</p>"},{"location":"first_program/#complex-conditions","title":"Complex conditions","text":"<p>Ok, but how do we print 'Fizz' on all multiples of 3, instead of just 3? By making the if-statement's condition more complex: <pre><code>number = 0\nwhile number &lt; 101:\n    if number % 3 == 0:     # This line changed\n        print(\"Fizz\")\n    else:\n        print(number)\n    number = number + 1\n</code></pre> Try running this code to see what it does.</p> <p>The first thing to understand is the <code>%</code> symbol. In Python this is the modulo operator. The modulo operator gives us the remainder of dividing the number on the left by the number on right. Here it gives us the remainder of number's value divided by 3.</p> <p>The condition then checks if the remainder is 0. When the remainder of a number <code>x</code> divided by a number <code>y</code> is <code>0</code>, that means that <code>x</code> must be a multiple of <code>y</code>.</p> <p>In other words, the if-statement is just checking if number is a multiple of 3.</p>"},{"location":"first_program/#the-else-if-statement","title":"The else-if statement","text":"<p>Now, lets make it print 'Buzz' for multiple of 5. Run the following code <pre><code>number = 0\nwhile number &lt; 101:\n    if number % 3 == 0:\n        print(\"Fizz\")\n    elif number % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(number)\n    number = number + 1\n</code></pre> We added a new kind of statement, called an 'else-if statement (in Python we abbreviate 'else-if' to 'elif'). The else-if statement is a combination of the else-statement and the if-statement. An else-if statement runs when the if-statement above it did not run AND the else-if's condition is met.</p> <p>Note that we were simplifying when we said that an else-statement must come after and if-statement. It can also come after an else-if statement (as in this code). An else-statement does the same thing regardless of whether the previous statement is an 'if' or an 'else-if': it runs if the previous statement did not.</p>"},{"location":"first_program/#strings","title":"Strings","text":"<p>Running the code, you might notice a problem: multiple of both 3 and 5 are replaced with 'Fizz', instead of 'FizzBuzz'. This is the last change, but it's also the most complex: <pre><code>number = 0\nwhile number &lt; 101:\n    output = \"\"\n    if number % 3 == 0:\n        output += \"Fizz\"\n    if number % 5 == 0:\n        output += \"Buzz\"\n    if output == \"\":\n        output = number\n    print(output)\n    number = number + 1\n</code></pre></p> <p>Let's run through all the new ideas in this code.</p> <p>Firstly, we create a new variable called output, and set its value to \"\". When we enclose a value in quotation marks, that means the value is a string. A string is a series of letters, numbers, or other symbols (like \"Hello, World!\", \"Fizz\", and \"Buzz\"). Because we haven't put anything between these quotation marks (not even a space!), output is an empty string; a string containing nothing.</p> <p>Secondly, we've changed what our if-else statements do. Now, instead of printing anything, they change the value of our new variable output.</p> <p>It might look like we're adding \"Fizz\" and \"Buzz\" to output, but that's not quite correct. Because output is a string, not a number, we cannot 'add' to it. With a string, the '+' symbol means 'concatenate'. In other words, 'attach this string to the end of that string'. So <code>output + \"Fizz\"</code> attaches \"Fizz\" to the end of an empty string \"\". And <code>output + \"Buzz\"</code> will either add \"Buzz\" to the end of \"Fizz\" or an empty string, depending on whether the previous if-statement ran.</p> <p>The third if-statement checks if output is empty. Because the two previous if-statements concatenate text to output, output will only be empty when the two previous if-statements did not run. And because the two previous if-statements run when number is a multiple of 3 or 5 respectively, then output will only be empty if numer is not a multiple of 3 or 5.</p> <p>This means that our third if-statement only runs when number is not a multiple of 3 or 5. According to the rules of FizzBuzz, we should print the number itself. So we set output to the value of number.</p> <p>Then, we simply print whatever the value of output is. Run it and see for yourself!</p>"},{"location":"first_program/#conclusion","title":"Conclusion","text":"<p>Congratulations, you've just written your first program in Python!</p> <p>Now that you've done, why not try tinkering with the program? In an interview you might be asked to add new conditions to your program, like adding \"Pop\" if the number is divisible by 7. Working with code is the best way to learn code. Why not start now?</p>"},{"location":"glossary/","title":"Glossary","text":"Term Definition Current working directory The directory that is currently open in a given terminal session. Git Git is a free and open-source VCS. It is the most widely used VCS today, and is used in COMP-1510. GitHub GitHub is a website which can host projects using git. It is widely used in the software development industry, especially for hosting portfolios. All your projects and labs in COMP-1510 will be hosted on GitHub. This website is also hosted on GitHub! IDE Integrated Development Environment. A program for running and writing code, usually with helpful features. Installer A basic program that's designed to be downloaded and run once in order to install the actual program on the computer. Interpreted language A programming language where the code itself, in text form, is directly executed by the computer, as opposed to being compiled into a binary format like an exe file. Python is a popular interpreted language, as is JavaScript which runs in your browser and powers websites. Interpreter A program that translates code written in a particular programming language into instructions that the computer runs. PATH A list of programs that are immediately available in the terminal regardless of the current working directory. PEP 8 Python Enhancement Proposal 8. A style-guide for writing code in Python. Adherence is mandatory for COMP-1510. Personal Access Token A short text string of random characters that works similarly to a password or the session cookie in a browser PyCharm PyCharm is an IDE designed for Python. PyCharm is used in COMP-1510. Python Python is the programming language used in COMP-1510. Terminal Also called the command prompt, it is a text-based interface that software developers sometimes use instead of the graphical user interface, as it allows for more precise control of the commands given to the computer. VCS Version Control System. Software for keeping track of changes you make while programming. Allows you to track and revert changes, and merge changes made by multiple people."},{"location":"installation/","title":"Installing Python and PyCharm","text":"<p>In order to user Python with PyCharm, you will first have to install both piece of software. Although you will be using  them in tandem, Python and Pycharm are separate pieces of software made by separate organisations. As such, they will need to be installed separately.</p> <p>COMP-1510 requires using specific installation options which are easily missed. As such, this page will cover how to properly install Python and PyCharm the first time.</p> <p>The screenshots in this document will show the installers for Windows. The UI will be slightly different on other operating systems, but the overall process will be the same.</p>"},{"location":"installation/#installing-python","title":"Installing Python","text":"<p>Most Linux distributions should already come with an upto date Python interpreter, but Windows doesn't have one by default and Mac come packaged an outdated version.</p> <ol> <li> <p>Go to the official Python download page on the computer you want to install Python to.</p> </li> <li> <p>The website should automatically detect your operating system and change the main download button to the correct version of the installer. If the auto detection is not correct, click one of the options below to manually select the version. </p> </li> <li> <p>Go to the folder where the file was downloaded to and click on it to begin installation.</p> </li> <li> <p>Check the box labelled <code>Add python to PATH</code>, to make Python more easily accessible on your terminal, and then click <code>Install Now</code>. </p> </li> <li> <p>Wait for the installer to finish. </p> </li> <li> <p>Click <code>Close</code> when the installation is complete. </p> </li> </ol>"},{"location":"installation/#installing-pycharm","title":"Installing PyCharm","text":"<p>One mistake students often make when installing PyCharm is selecting the wrong version. In COMP-1510, students should use PyCharm Professional, not PyCharm Community. PyCharm Professional requires a license to use, which BCIT students receive for free.</p> <ol> <li> <p>Go to the PyCharm download page on the computer you want to install PyCharm to.</p> </li> <li> <p>PyCharm Professional supports Windows, Mac, and Linux, and the website should automatically detect your operating system. If it is incorrect, click on the correct one from the choices just below the header.</p> </li> <li> <p>The website should also automatically detect the architecture of your computer and select the correct version of the installer, but if it is incorrect, click the dropdown beside the <code>Download</code> button and select the correct version. </p> </li> <li> <p>Click the <code>Download</code> button to download the installer.</p> </li> <li> <p>Go to the folder where the file was downloaded to and click on it to begin installation. It's a large file so it's normal for it to take a few seconds to load.</p> </li> <li> <p>Click next for the next two screens.  </p> </li> <li> <p>It is recommended to check the boxes for <code>Open folder as project</code> and <code>Associate .py files</code>, as these will allow for quicker access to PyCharm. Then click next. </p> </li> <li> <p>Click install. </p> </li> <li> <p>Wait for the installation to complete. </p> </li> <li> <p>Check the box labelled <code>Run PyCharm</code> and then click <code>Finish</code>. The newly installed PyCharm will open. </p> </li> <li> <p>Check the box for agreeing to the user agreement and click <code>Continue</code> </p> </li> <li> <p>Choose whether to send usage statistics to Intellij. </p> </li> <li> <p>Click <code>Free 30-Day Trial</code> for now, we will activate the license in the Configuration section. </p> </li> <li> <p>If the installation was successful, you should see this landing screen: </p> </li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>If you have followed these steps successfully, the PyCharm IDE should already be open in front of you. Proceed to Configuration to set up the IDE for use in COMP-1510.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"Problem Likely cause Solution FizzBuzz program prints the word 'number' instead of the number You put the variable number in quotation marks. Change <code>print(\"number\")</code> to <code>print(number)</code> and rerun the program. FizzBuzz program produces <code>TypeError: can only concatenate str (not \"int\") to str</code> You tried to concatenate number to output. Change <code>output = output + number</code> to <code>output = number</code> and rerun the program. FizzBuzz program produces some kind of <code>NameError</code> Either <code>\"Fizz\"</code> or <code>\"Buzz\"</code> are not enclosed in quotation marks Ensure you have <code>\"Fizz\"</code> and <code>\"Buzz\"</code> instead of <code>Fizz</code> or <code>Buzz</code>. Code in FizzBuzz program does not run in proper order Indentation in code is incorrect. Ensure all indentation in your code matches the code samples from the instructions."}]}